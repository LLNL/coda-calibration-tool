{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coda Calibration Tool (CCT) 1.0.20 documentation 2022-07-31; Version 1.0; Authors Barno, Justin | Mayeda, Kevin About CCT The Coda Calibration Tool (CCT) is a Java-based application that stems from a collaborative project by scientists from the USNDC (AFTAC/SDS) and DOE (LLNL) as well as significant input from seismologists from the University of Utah, INGV (Milan) and USGS (Golden, CO), Natural Resources Canada. This tool consolidates research-mode scripts circa 1995 (SAC, C-shell, Fortran) into a robust platform-independent tool using the empirical 1-D method outlined by Mayeda and Walter (1996) and Mayeda et al. (2003) . CCT provides a fast and efficient means of calibrating and processing local and regional coda envelopes to estimate stable source spectra, moment magnitude, and apparent stress, that are roughly 3-to-4 times less variable than estimates derived from traditional direct wave estimates. The source parameters represent averaged values and are virtually free of lateral path heterogeneity and source radiation anisotropy. The methodology has two options for dealing with potential regional source scaling. In the first (and preferred) case, independent, ground-truth reference source spectra are used in the calibration process to constrain the frequency-dependent site terms. In the second case, reference events with independent M w estimates are used to constrain the long-period site terms, but for the higher frequencies we impose a Brune (1970) source spectrum with an a priori source scaling, currently set so that the apparent stress increases as ~M o 0.25 . Tutorial Guide for New Users The following is a step-by-step guide for a specific example taken from the San Francisco Bay Area region using broadband waveform data from the UC Berkeley Seismological Laboratory. Note For a new dataset and region, you should expect to run CCT multiple times before settling on a final coda calibration. Initial calibrations invariably will require finding and removing problem events/envelopes/stations that for whatever reason prevent the code from finding the \u2018best\u2019 model parameters. Overwriting the Envelope directory during the initial QA of the data is common. The data set from the SF Bay area was reviewed several times and the resulting calibration is very stable, but this serves as a good example of how you might calibrate your own dataset. Getting Started Downloading CCT The latest version of the Coda Calibration Tool (CCT) can be found on the release page The standalone CCT jar file is calibration-standalone-1.0.20-runnable.jar while the REST services only are available in calibration-application-1.0.20-runnable.jar. Downloading SF Bay Area example tarfile The complete SF Bay Area calibration which includes SAC waveforms, stacked envelopes and JavaScript Object Notation (JSON) parameter files can be downloaded here Running CCT You can launch CCT by executing Java from the command line as: java -Xmx12g -jar calibration-standalone-1.0.20-runnable.jar Or, if you have Java 11+ as: java -XX:MaxRAMPercentage=70.0 -jar calibration-standalone-1.0.20-runnable.jar Generally your -Xmx flag should be set to, at most, ~70% of the physical RAM available on the machine. You can add the --spring.profiles.active=file flag to the Java call if your dataset is larger than the physical RAM on your machine. This will output a large database file that is also useful if you want to save the entire database or connect to it with an external database browser tool. The tradeoff is that you have to wait for the read/write times of the hard drive so this mode can be slower than the default RAM-only mode. Recommendations For Selecting Calibration Data For a stable and robust calibration, it is best to choose larger events with good SNR that are distributed geographically in the region of interest and recorded by a large number of stations. In addition to broad event distribution, the stations should also be well distributed, otherwise it is difficult to constrain the path terms. Furthermore, it is best to choose clean records that have little if any aftershocks that might contaminate the coda. Including lots of questionable events can ruin the calibration so it is far better to be selective in the choice of events\u2026, more events is not necessarily better! For the SF Bay Area example dataset, there is an abundance of seismicity and many broadband stations to choose from. In this case we have 10 broadband stations and 40 events which is more than sufficient for constraining the calibration parameters (e.g ., we could have used 75% less events and stations and would have obtained nearly the same calibration). We could likely have comparable results with far less events and stations. For example, in the coda calibration in Israel outlined in Mayeda et al. (2003) we used only two stations on opposite ends of the country and a smattering of events throughout the country. With regard to the length of SAC waveform segments, for regional events ranging between ~3.5< M w <6, it is recommended to choose window lengths of ~-300 sec to ~2000 sec relative to the origin time. These longer records are necessary for the long-period surface wave codas (0.02< f <0.3-Hz) for the larger events, but depending on the seismicity level, you can modify the window lengths. For a very local calibration (~<100 km), with only small magnitude events ( M w < ~4.0), window lengths of -50 to 400 seconds relative to the origin time might suffice. Once the envelopes are formed, they are decimated so they will not take up as much space. Creating Envelopes with SAC Waveform Data Initial Waveform Data CCT requires SAC files. Horizontal components are preferred, but you can use verticals, just don\u2019t mix them and keep in separate folders. Envelope tool will stack all components for an event recorded at station X. The tool will use the SAC header variables for the event name ( KEVNM ) and station name ( KSTNM ) in the SAC header to create the names for the envelope files. Note The Envelope tool only cares about event time and network/station/channel name. Everything else is optional, though we recommend loading the SAC headers completely. Deconvolve instrument response to velocity in nm/sec. Check that the IDEP parameter in the SAC headers is \u2018 VELOCITY (NM/SEC) \u2019. Set both station and event location headers (i.e., STLA , STLO , EVLA , EVLO ) Set origin time to 0 seconds. Below is an example header of one of the horizontal components. Event origin time must be 0 in the \u2018 OMARKER \u2019 header. This can be done using the \"ch\" command in SAC as follows for the example waveform from Tajikistan (TJ.CHGR): sac> ch o gmt 2010 342 08 21 34 560 (to introduce the event origin time) sac> ch allt ( -1 * &1,o ) (all times are shifted.., begin (B), end (E) to match the \u2018 OMARKER \u2019) Warning If \u2018 OMARKER \u2019 and event locations are not set in the SAC header CCT will not work. Figure. 1, A raw input waveform Figure. 2, The related SAC headers Envelope Formation Start the envelope tool from the main CCT menu Tools > Create Envelopes Load a parameter file: File > Import Job Config... (Choose the JSON file that defines the frequency bands you are interested in such as envelope-bands.json) Figure. 3, Importing an envelop job configuration file. The envelope tool is flexible, allowing you to create other frequency bands or different bandwidths if needed. This can be done by selecting \"Band Generation Settings\" with overlap and log 10 (or linear) spacing. More overlap will result in smoother spectra. Figure. 4, Generating bands from a specification instead. Load SAC waveform files: File > Envelopes from Directory... or File > Envelopes from Files\u2026 Choose your processed SAC files. Warning! If you choose \"Envelopes from Directory\", the tool will attempt to process all files in the directory as well as in all subdirectories. Therefore, it is recommended to store your processed SAC waveforms in their own directory (without any extraneous files or subdirectories). Immediately you will be prompted to choose a location for your output envelopes. We recommend a subdirectory called \"Envelopes\" in the working data directory (i.e. , Data_new/Envelopes). Close the Envelope Tool when the progress bar completes. The envelopes will be created in the following directory structure: ...Data_new/Envelopes/YEAR/MONTH/EVID/STATION/STA_COMP_EVID_FREQ1_FREQ2_VEL_.ENV In subsequent steps, you can import all stack envelopes created in this envelope tool with \"File > Import stack directory\u2026\" and choose the \"Envelopes\" directory. San Francisco Bay Example Dataset Untar Example File and Description In a terminal window copy and untar the Bay_Area_CCT_Example.tar to your directory of choice. This should be the working directory from which you run CCT. You should see the following files and directories: Figure. 5, Example data set list. Calibration_Data directory Upon completion of calibration, you can export this directory which includes the most current JSON calibration parameter file that includes frequency-dependent parameters for site-correction, envelope shape, velocity, path-correction, minimum and maximum coda window length, GT reference events with apparent stress, and reference M w \u2019s. Additionally there are separate site correction files for each station that was calibrated. All files in this example are in ASCII format. Calibration_Parameters_Kevin.json file Parameter file that represents the \u2018final\u2019 JSON file for the Bay Area coda calibration (taken from the Calibration_Data directory and renamed). This could be used for automated processing of future events, or as a starting point in any future updated calibration if new events or stations were acquired. Data_new directory Directory of deconvolved broadband horizontal component velocity SAC waveforms for each event and station. The envelope tool was used to form these envelopes (already applied in this example) and were copied to the Envelope_stack_Kevin_picks directory. Warning If other components exist in the Data_new directory, such as the vertical component or other sampling rate channels, then they will all be added to the final stacked envelope. Only include in this directory the components for which you intend on using in the calibration! Also, it will search sub-directories so be aware! Envelope_stack_Kevin_picks directory Directory of stacked, log 10 averaged horizontal envelopes for pre-determined narrow frequency bands that have been manually QA\u2019d and measurement end times were picked ( f-markers ). Mw_CMT_BSL.dat file ASCII file of independent moment magnitudes determined from full waveform inversion courtesy of Doug Dreger at the Berkeley Seismological Laboratory (BSL). These SF Bay area events can be used for calibration and/or validation. Some of these events were added to the end of the Calibration_Parameters_Kevin.json file. application.properties file Optional configuration override file for CCT. This example shows how to use other independent map layers from a WMS 1.3 server (e.g., NASA WorldWind) to be included in the CCT maps. Note : This file must reside in the directory where CCT is initiated. Envelope-bands.json file JSON file that controls the frequency bands for creating new envelopes using the envelope tool. There are options for smoothing and interpolation if you choose to change the preset values. Step-by-Step Bay Area CCT Example Read in necesssary data Read in stacked envelopes using the pulldown tab: File>Import Stack Directory\u2026 Figure. 6, Importing stacked envelopes in a directory. Select the Envelopes_stack_Kevin_picks directory You will see the following Task-Progress pop-up window as the envelopes are being read in (roughly 7 seconds on my machine). Upon completion you\u2019ll see this: Figure. 7, Dialog showing amount of envelopes imported, errors (if any), and if the process has completed. Next, read in the Coda Parameter file: File>Import Coda Param... Select the Calibration_Parameters_Kevin.json file (This reads instantly) To view the data in map form, click the Map button in the upper right. In the upper right map pop-up, select the tile pull-down in the upper right. Be sure the application.properties file is in the working directory if you want to use custom layers. You can click on a station or event to see the corresponding name and view envelopes. Figure. 8, The CCT map showing a custom WMS layer featuring the USGS topographic map. Note If you want to take a high resolution image, you can click the camera icon in the lower left corner. Run the calibration Figure. 9, Beginning a calibration in CCT. At this point you have two choices. If this were a brand new calibration, then none of the envelopes have been picked with measure end times ( f-markers ) so you can choose Run Calibration (Auto Pick) which uses a simple STA/LTA kind of approach to find the \u2018best\u2019 end time measurement. This provides a good initial estimate but you will find that many need to be refined manually to change the auto-picked f-markers , then re-run the calibration again. Auto-picked envelopes will always have an \u2018 ap \u2019 designation on each envelope at the peak S -wave arrival but if you manually change the f-marker and export the envelopes, the \u2018 ap \u2019 will disappear the next time the data is read into CCT. For this example however, use the other pull-down option which is Run Calibration. This will use the existing f-marker picks in the SAC headers (manual and auto-picked) and begin fitting the envelopes to obtain the envelope shape parameters (e.g., \ud835\udf38 and b ), peak S-velocity as a function of distance (e.g., V(r|f) ), perform path correction inversion (e.g., P(r|f) ), and finally site correction determination using predetermined ground-truth (GT) source spectra (e.g., [S(f)\u00b7T(f)] ). This takes less than 2 minutes on my machine and you can close the Progress pop-up screen if you want without affecting the calibration progress. QA Results (vertical tabs) Data tab This is the single most important QA feature of the tool because it allows you to manually re-pick envelopes or eliminate bad traces, then you will have to re-run CCT to get a more refined calibration. Calibrations are only as good as the input data so it\u2019s important to eliminate bad envelopes or make time pick adjustments, then repeat the calibration. Through an iterative process the calibration parameters will be better constrained and robust. Adjusted picks can either be written out to a new folder or to the existing folder (see below for more details). Sorting & Re-Picking Events In the data table, under the frequency column heading, you can click on the low heading tab and this will sort the bands from lowest to highest frequency based on the low end of the frequency band. Similarly, by clicking on the station column heading you can sort by station in alphabetical order or the event column heading and it will sort by event ID. Figure. 10, Selecting a row to view the associated waveform record. By clicking on any event row (above figure) a pop-up window of the observed envelope (blue), best fit synthetic (green), and model (gray) will appear (see below figure). Figure. 11, Waveform record plot with associated metadata. The f-marker (red vertical line) can be adjusted by clicking, then dragging the f-marker with the mouse. Place the f-marker before the envelope returns to the pre-event noise level and also before any visible aftershocks in the coda. Results will be most accurate when the synthetic envelope and model envelope (green and gray lines, respectively) match. For example, sometimes the fit and model envelopes will diverge towards the end of the envelope, and it is best to place the f-marker before they diverge, if possible. Group velocity markers can be toggle on with the \"GV\" button. This shows the expected phase onset time given the event origin time and distance based on the start and stop velocity settings in the parameter tab. The minimum and maximum window time restrictions for the length of the coda window can be visualized by toggling the \"Window\" button. The window restrictions are also defined in the parameters tab. The minimum window length is a hard restriction that will eliminate coda windows that do not have a sufficient data. The maximum window length is a soft restriction that will truncate longer coda windows to the maximum. The waveform with a red F-pick icon button toggles 'click-to-pick' mode. While in this mode clicking anywhere in the plot will automatically move the f-marker without needing to click and drag. This mode is most useful when you are planning to pick or re-pick potentially many waveforms in a session. The 'move start' ( MS ) button toggles the display of the coda-start ( CS ) marker. This marker tells the amplitude measurement code where to cut the coda window before performing the L1 fit and making the amplitude measurement. This is useful when an area as very high variability early in the coda for potentially reducing variance in the amplitude measurements. You can add an offset for an entire frequency band in the parameters tab using the 'coda-start' column. You can also change the start for an individual offset of a specific waveform by clicking and dragging the \"CS\" pick. When you release the mouse you will see the \"CS\" pick change to a 'user coda start' ( UCS ) pick instead. A \"UCS\" pick works the same as a \"CS\" pick but the code will not move a \"UCS\" pick when parameters change and a \"UCS\" is always given priority over a \"CS\" pick. The solid horizontal black line is the sum of the averaged SNR and pre-set tolerance in the calibration JSON file (which you can change if you want). The dashed horizontal line is a quasi average noise level amplitude. To eliminate a trace move the f-marker before the start of the S-wave arrival. If you do not want to use an envelope or an entire event, you can uncheck the box in the \"Used\" column and it will not be exported in the next step. You can zoom into the envelope figure by dragging a box around the area you want to zoom into on the waveform plot. Double-click anywhere on the screen to revert back to the original scale or hit the home icon in the top right icon tray to reset the axes. To select a large number of envelopes (see next figure) you can click the upper bound and then while depressing the \u2018shift\u2019 button use your mouse to select then \u2018single click\u2019 the lower bound that you desire (see highlighted blue area). This allows reviewing lots of data to look for trends (e.g., aftershocks, noise bursts) across stations, bands or events. I select a single band and methodically review all events and stations. Figure. 12, Viewing multiple waveforms at once in a paginated display. This display also supports synchronized zooming of all waveforms by toggling into the 'Sync Zoom (SZ)' mode. CCT will display five envelopes at a time, and you can use left and right arrow keys or the associated buttons (top left) to page through all the envelopes in your selection. Once you\u2019re done, export the waveforms; otherwise all your manual picking will be lost! Also, in the Data pull down tab, you can choose \u2018Make Picks Reviewed\u2019 which will change all auto-picked f-markers reviewed, if for example you\u2019ve visually checked all the f-markers and would like them to be changed to \u2018reviewed\u2019. If you export the envelopes then all \u2018 ap \u2019 marks will disappear. Important To save all the new picks in the current session, under File choose Export Waveforms and you can choose the same Envelope directory, in this case Envelope_stack_Kevin_picks, or create a new directory. The next time you run the calibration, the tool will use the new f-marker picks. Parameters tab Allows users to view the calibration parameters during the current calibration and make adjustments, specifically the window length limits ( Min and Max ) as well as SNR levels (in log 10). These changes will ONLY be kept if you export the calibration (File->Export Calibration). You will then have to use the newly created Calibration_Parameters.json file for the subsequent calibration refinement. Figure. 13, The parameters table that defines the core of a calibraition. Shape tab Allows users to view empirical envelope shape parameters and velocity fits to the observed data as a function of distance (see Mayeda et al. 2003 for more details). Note You must first hit the Refresh button in the upper right corner. Then in the Frequency Band pull-down tab, you can select the frequency band you would like to view. If you keep the mouse on the Frequency Band tab, you can use the up or down arrows to cycle through the various bands. In the example below I have selected an outlier in peak Velocity in the 1.5-2.0-Hz band which is now highlighted with a blue circle, as well as in the subsequent shape parameter plots, \ud835\udf38 and b . The event envelope is shown to the left and the event and station is shown on the map in white. The envelope shape parameter \ud835\udf38 (Gamma), which controls the shape of the early coda, and b , which controls the later coda (exponential term), all look to have reasonable fits as a function of distance using a simple equation of a hyperbola (blue dashed lines). Figure. 14, Plots showing the results of calibrating the three 1D shape models. Path tab Allows users to view interstation amplitude before and after path correction. Note You must first hit the Refresh button in the upper right corner. Reviewing the path corrections for all the frequency bands is important for identifying outliers in the data due to incorrect instrument correction or degenerative issues with a particular waveform (aftershocks can often be the culprit). It also allows you to ascertain if the path corrections are reasonable and whether the distribution of calibration data and stations is sufficient. The example below on the far right shows interstation amplitude scatter between stations BKS and SAO at 1.0-1.5-Hz before (red triangles) and after path correction (blue triangles). For this example, the interstation scatter for the path-corrected data is 0.13 and the stations are ~142 km apart. The middle panel is a summary of all possible interstation combinations for this band where we have plotted data standard deviation as a function of station separation in km with a minimum number of common events of 4 (see \u2018Station Count Filter\u2019). If there were outliers, this feature helps to identify the offending envelope or event so that it can be either re-picked or removed. We see that the path corrections are working well because data standard deviation for path-corrected coda (blue circles) remains at ~0.1. As expected, the uncorrected coda amplitude\u2019s standard deviation increases with increasing station separation (red squares). Figure. 15, Plots showing the the path correction results by frequency band for the whole dataset (left) and two specific stations compared to each other (right). Site tab Allows users to view source spectra in units of N-m after site/transfer function correction determinations (e.g., [S(f)\u00b7T(f)] ) have been made using selected GT reference events. Note You must first hit the Refresh button in the upper right corner. Under the Source Spectra tab, selecting the Event drop-down menu allows you to cycle through the various events. The example below shows the case for one of the reference events for which we had previously determined an apparent stress (\u03c4 a = \u03bcEs/Mo) of 0.15 MPa using coda spectral ratios (see Mayeda et al., 2007 ). Using several GT reference events, CCT determines the best average, station-specific site/transfer terms per band to be applied to all events. This obviates the need to assume any apparent stress scaling for the region. If only independent M w \u2019s are available, then CCT defaults to an assumed scaling of F c ~ M o 0.25 following Mayeda and Walter (1996) . On the right of the spectra are the stations used for this event. Black dashed line is the reference Brune (1970) spectral shape that was determined beforehand. Red dashed line is the best-fitting Brune spectral model to the observed data. Black solid lines connect the averaged spectral value in each band. Vertical line and F c on the spectra denote the corner frequency from the best-fit source spectra. On the left hand side of the moment-rate source spectra are associated metadata and final measurement values. Observed Total Energy Integrated observed energy (from velocity-squared spectra) Observed Apparent Stress Apparent stress derived only from observed measurements Model Fit M w M w derived from omega-square fitting to observed data Model Fit Apparent Stress Apparent stress derived from theoretical best-fit omega square model Model Fit Energy Integrated energy from 0 to infinity Reference M w Independent M w derived a priori , preferably from waveform modeling. Figure. 16, Site correction and final results plots showing the end spectra for each event after all corrections have been made. As with other data panels, you can click on any amplitude spectral value and a pop-up window showing the envelope fit will appear which can be adjusted if necessary. Remember to export envelopes to save any changes made to f-markers ! You can also zoom in on any part of the spectra to QC the data points by clicking and dragging. https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServerSource Results tab allows you to review the quality of the calibration (see figure below). The top left figure shows M w for validation events (black squares) compared to the measured M w coda from spectral fitting (x-axis) as shown in the Source Spectra tab. M w for GT reference events (red circles) also are shown. Figure. 17, The site results overview displaying the raw data table and summary plots for the entire calibration data set. The upper middle figure shows that the reference events\u2019 apparent stress are faithfully returned after calibration. Upper right figure shows variation in site correction. The bottom left figure shows seismic moment vs total energy. Lower middle figure shows moment vs apparent stress and the figure on lower right shows the associated moment vs corner frequency. Finally, the table on the bottom shows all the measured source parameters along with other diagnostic information such as misfit, error, iteration count, station count, etc. The Site->Site Terms tab shows two figures. The bottom figure in the screenshot below shows averaged station-specific site and S-to-coda transfer terms that are used to transform the distance-corrected coda amplitudes (in dimensionless units) to an absolute value in N-m. To isolate only the weak motion S-coda site term (from the common S-to-coda transfer function term), a ratio (subtraction since values are in log 10) can be made relative to the average across the network, or relative to a particular site, such as a \u2018rock\u2019 site. This option is shown in the top figure taken from Ridgecrest, CA CCT calibration where we have chosen a hard rock site POR as the reference in this example. Notice we observe pronounced relative amplification in the ~0.2 to 3.0-Hz range for softer soil sites, whereas above this range we see that absorption (low surface Q) dominates those same sites. Figure. 17, Plots showing the relative site correction terms for each station, a network average, and a plot relative to any individual station in the correction set. Measured Mws tab This feature allows you to measure M w s using an existing calibration for new events in a region. This feature also enables automated processing of new events as they are formed provided the event is located in the calibrated area and a calibrated station recorded the event by using the REST services CCT provides. Oftentimes we impose a more strict set of guidelines for calibration, whereas for routine event processing we might relax the minimum window length or change the SNR levels. Save your M w s with File -> Export Measured Mws\u2026 Glossary of terms Auto-Pick (ap) Designation to show that the f-marker (envelope measurement stopping point) was chosen automatically by CCT using a modified STA/LTA between the observed and synthetic coda envelopes. b(r|f) 'beta' (parameter) Exponential decay parameter that controls the envelope shape as a function of distance, r, for each frequency band, f. (e.g., see Equation 1 below) Calibration Events Good quality events used to determine envelope shape, velocity and path terms. Best to choose events with good spatial distribution across the network of stations and ample signal length, preferably free of aftershocks and data spikes. \ud835\udf38(r|f): 'gamma' (parameter) Envelope decay parameter that controls the early part of the coda shape immediately after the direct wave arrival as a function of distance, r, for each frequency band, f. (e.g ., see Equation 1 below) Ground-Truth (GT) Reference Events Theoretical Brune source spectra defined by an independent moment magnitude ( M w ) and an apparent stress estimate (in MPa). These are used for determining frequency dependent site terms for each station for all frequency bands. Can be used in conjunction with Reference M w Events. These can be appended to the calibration JSON file (see Calibration_Parameters_Kevin.json). Use of GT events precludes assuming any stress drop scaling for the region. f-marker Envelope measurement stopping time stored in the observed envelope header that can be picked automatically or manually. If an ap pick is visible at the direct arrival, the f-marker was obtained through autopicking. Once the f-marker is manually moved and the envelope is saved, the ap pick disappears the next time it is read in. Reference M w Events Independent moment magnitudes determined by waveform modeling that are used to constrain only the long period site terms. Can be used in conjunction with GT reference events. These can be appended to the calibration JSON file (see Calibration_Parameters_Kevin.json). Validation Events Independent moment magnitudes used to validate the calibration. These events were not used for site correction determination, but could be used for envelope shape, velocity and path determination. These can be placed in the calibration JSON file (see Calibration_Parameters_Kevin.json). V(r|f) velocity (parameter) Peak velocity of the S-wave or surface wave envelope as a function of distance. This gives us a starting time ts = r/V(r|f) to begin the synthetic envelopes which will be used to measure the observed envelopes. (e.g., see Equation 1 below) Equation 1 Coda amplitude A c is a function of distance ( r ) and time ( t ) relative to the origin time for each narrow frequency band, f . W0 is the source term, S is the site term, T is the S-to-coda transfer function, P is the empirical path correction term, H is the Heaviside step function, \ud835\udf38 and b control the coda envelope shape as a function of distance, r (km). t s is the direct wave arrival time, t s = r/V(r|f) and V(r|f) is the velocity at distance r of the peak arrival that is empirically determined by CCT. See Mayeda et al., (2003) for a more detailed explanation of the method and parameterization. Note The site ( S ) and transfer function ( T ) terms are combined in the tool, as both are distance independent and cannot be separated. It is assumed that the S-to-coda transfer function is common for all events in a region, except in extreme cases of very shallow or deep crustal events. We often refer to the \u2018site term\u2019 but it actually includes both effects. Building CCT from the Java Source Code Building CCT from source code will require Apache Maven version 3.8.x or later. If the version of Maven in your system is older that the required version, you will need to download a recent release from https://downloads.apache.org/maven/maven-3 We recommend that users download the pre-compiled versions of Apache Maven (see files under the binaries/ folder). In the case that the user will need to build Apache Maven 3.8.x from source, this will require the Java JDK version 1.11.x or later. Once you have the JDK and Maven binaries you can build CCT by opening the top level 'coda-calibration' directory and running in a terminal: $>mvn clean install Which will download all the dependencies, compile all the code, and then produce built artifacts. You should see a build report upon completion in the terminal (see below): Figure. 18, Build success report for CCT and sub-modules. Artifacts are available for the overall project along with all sub-modules in the relevant target/ folders in each project and sub-project. Of most interest to end users is the standalone desktop application jar that can be found at 'coda-calibration/calibration-standalone/target/calibration-standalone-[VERSION]-runnable.jar'. Accessing the internal database CCT uses an H2 database for storing all data and derived measurements internally during processing. The tool additionally supports an 'external file' mode that allows for external tools to access this database. This capability allows for querying, joing, aggregating, and exporting any data produced by the tool. CCT additionally includes the H2 web-based SQL client as a built in option if no other JDBC tools are available. Launch the tool in file-based database mode: java -jar calibration-standalone-*-runnable.jar --spring.profiles.active=file This will create a codaH2.*.db set of files in the current directory Launch the embedded database browser (or any H2/JDBC compatible reader like DBeaver ) java -cp calibration-standalone-*-runnable.jar -Dh2.bindAddress=127.0.0.1 -Dloader.main=org.h2.tools.Console org.springframework.boot.loader.PropertiesLauncher Now you can connect to the *.db file as a database using this connection string (update folder path to match yours) jdbc:h2:/path/to/codaH2.db;DB_CLOSE_DELAY=-1;COMPRESS=TRUE;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9999 Figure. 19, Login screen for connecting to the database as the default 'sa' user. Now you can start writing queries using any built-in SQL functions and export your results to CSV using the \u2018CSVWRITE\u2019 function Figure. 20, Example of using the built in H2 functions to export a SQL query directly as a CSV file. Using REST endpoints to get Mws The internal APIs are expecting internal JSON formats. CCT makes a distinction between the front-end import/export JSON and the backend transport JSON for a couple of reasons, mostly support for changing them independently and because we consolidate a lot of logic into the human facing \"summary\" JSON. As a result, you need to translate the exported calibration JSON to the internal format. The easiest way to do that is to load up the tool and import your calibration, then do a GET on the relevant endpoints to get the internal representation. Ideally before the end of the summer I should put together docs on this and maybe add a special endpoint just to do an import of existing user JSON as a one shot. So the shared frequency band parameters is a GET request to the https://127.0.0.1:53921/api/v1/params/shared-fb-parameters REST endpoint and the site specific parameters is a GET to https://127.0.0.1:53921/api/v1/params/site-fb-parameters . See the API Documentation for additional information about the JSON schema and endpoints. See the Example Jupyter Notebook for a working example of using these two JSON files for a calibrated region using FDSN webservices to fetch event information and waveforms, then feeding that information to CCT to measure M w s. Logging settings at runtime CCT pins the logging level to INFO in the default config. The runtime flag you need must be more specific to override this setting. Warning Rather than being able to set -Dlogging.level.gov.llnl=[LEVEL] you must go down to -Dlogging.level.gov.llnl.gnem.apps.coda=[LEVEL] or more spefific to override the logging level. Overriding envelope creation bands when using REST services You will need to change the example notebook POST command to the envelope service endpoints if you want to customize the bands generated. Alter the request (Python example below) to add a custom envelope job configuration JSON to the job request. This will cause the envelope service to use these bands instead of the default configuration. This also allows changing smoothing and bandwidth settings for bands. with open(\"envelope_job_config.json\") as env_bands: envelope_bands = json.load(env_bands) waveData[\"jobConfig\"] = envelope_bands r = requests.post('https://127.0.0.1:53921/api/v1/envelopes/create/batch-stacks-only/10000', json=waveData, verify=False) print(r.status_code) See the Example Jupyter Notebooks for usage examples. References Barno, J. (2017). LLNL/coda-calibration-tool, doi: 10.11578/dc.20180306.1 . Brune, J. N., Tectonic stress and spectra of seismic shear waves from earthquakes, J. Geophys. Res. 75, 4997-5009, 1970. Mayeda, K. and W.R. Walter, Moment, energy, stress drop, and source spectra of western U.S. earthquakes, 11195-11208, 101, J. Geophys. Res. , 1996. Mayeda, K., Hofstetter A., O'Boyle J. L., Walter, W. R, Stable and transportable regional magnitudes based on coda-derived moment-rate spectra. Bull. Seismol. Soc. Am., 93, 224-239, 2003. Mayeda, K., L. Malagnini, W.R. Walter, A new spectral ratio method using narrow band coda envelopes: Evidence for non-self-similarity in the Hector Mine sequence, Geophys. Res. Lett., doi:10.1029/2007GL030041 , 2007. Configuration variables Variable Default value Notes app.height 800 Default height in pixels of the CCT window app.width 600 Default width in pixels of the CCT window distance-threshold-km 300.0 Distance threshold for the critical distance to be used for determining which set of the group velocity values to use while building the path model envelope-app.max-batching 50 Maximum number of waveforms to process per batch while generating waveforms. Larger values take more memory but may speed up the process if you are generating large numbers. group-velocity1-gt-distance 4.7 Maximum onset group velocity (km/s) if beyond the critical distance group-velocity2-gt-distance 2.3 Minimum onset group velocity (km/s) if beyond the critical distance group-velocity1-lt-distance 3.9 Maximum onset group velocity (km/s) if before the critical distance group-velocity2-lt-distance 1.9 Minimum onset group velocity (km/s) if before the critical distance measurementPoolSize 10 Number of threads to allocate to the measurement pool, larger values may increase throughput on machines with high CPU core numbers path.phase-velocity-kms 3.5 Expected phase velocity to use during path correction path.use-aggressive-opt true Run additional optimization chains to increase stability, can be set to false for faster runs in most cases when there is sufficient data. phase-velocity-kms 3.5 Expected phase velocity to use phase.phase-velocity-kms 3.5 Expected phase velocity to use shape-constraints.b0reg 10000 shape-constraints.bDistMax 1550 shape-constraints.bDistMin 0 shape-constraints.fittingPointCount 10000 shape-constraints.g0reg 100 shape-constraints.g1reg -1 shape-constraints.gDistMax 0 shape-constraints.gDistMin 600 shape-constraints.iterations 10 shape-constraints.lengthWeight 0.5 Weighting given to how long the coda window is when fitting the gray shapelines [0.0, 1.0]. shape-constraints.maxBeta -0.0001 shape-constraints.maxBP1 1000 shape-constraints.maxBP2 20 shape-constraints.maxBP3 1500 shape-constraints.maxGamma 4.0 shape-constraints.maxGP1 100 shape-constraints.maxGP2 101 shape-constraints.maxGP3 101 shape-constraints.maxIntercept 20.0 shape-constraints.maxVP1 600 shape-constraints.maxVP2 5000 shape-constraints.maxVP3 5000 shape-constraints.minBeta -4.0 shape-constraints.minBP1 -500 shape-constraints.minBP2 0.1 shape-constraints.minBP3 0.0001 shape-constraints.minGamma 0.001 shape-constraints.minGP1 0 shape-constraints.minGP2 0 shape-constraints.minGP3 1 shape-constraints.minIntercept 0.001 shape-constraints.minVP1 50 shape-constraints.minVP2 1 shape-constraints.minVP3 1 shape-constraints.v0reg 100 shape-constraints.vDistMax 1600 shape-constraints.vDistMin 0 shape-constraints.ybbMax 0.0005 shape-constraints.ybbMin -12.0E-2 shape-constraints.yggMax 100 shape-constraints.yggMin 0.01 shape-constraints.yvvMax 6.01 shape-constraints.yvvMin 0.5 show-energy-uq-summary false Show additional UQ min/max values for energy measurements in the summary table in Site/Measurement. show-stress-bounds-in-uq-spectra true Show the stress values in addition to the Mw values when plotting the UQ spectra in Site/Measurement. spectra-calc.iteration-cutoff 50 spectra-calc.max-apparent-stress-mpa 1000.00 spectra-calc.max-mw 10.0 spectra-calc.min-apparent-stress-mpa 0.0001 spectra-calc.min-mw 0.01 spectra-calc.suspect-energy-ratio 0.25 spectra-calc.suspect-iterations 50 spectra-calc.suspect-mw-range 1.5 spectraTruncationEnabled true Allows spectra to be truncated when mixing GT spectra reference events with Mw only references. velocity.calc.distance-threshold-km 300.0 velocity.calc.group-velocity1-gt-distance 4.7 velocity.calc.group-velocity1-lt-distance 3.9 velocity.calc.group-velocity2-gt-distance 2.3 velocity.calc.group-velocity2-lt-distance 1.9 webclient.basePath localhost:53921","title":"Home"},{"location":"#coda-calibration-tool-cct-1020-documentation","text":"2022-07-31; Version 1.0; Authors Barno, Justin | Mayeda, Kevin","title":"Coda Calibration Tool (CCT) 1.0.20 documentation"},{"location":"#about-cct","text":"The Coda Calibration Tool (CCT) is a Java-based application that stems from a collaborative project by scientists from the USNDC (AFTAC/SDS) and DOE (LLNL) as well as significant input from seismologists from the University of Utah, INGV (Milan) and USGS (Golden, CO), Natural Resources Canada. This tool consolidates research-mode scripts circa 1995 (SAC, C-shell, Fortran) into a robust platform-independent tool using the empirical 1-D method outlined by Mayeda and Walter (1996) and Mayeda et al. (2003) . CCT provides a fast and efficient means of calibrating and processing local and regional coda envelopes to estimate stable source spectra, moment magnitude, and apparent stress, that are roughly 3-to-4 times less variable than estimates derived from traditional direct wave estimates. The source parameters represent averaged values and are virtually free of lateral path heterogeneity and source radiation anisotropy. The methodology has two options for dealing with potential regional source scaling. In the first (and preferred) case, independent, ground-truth reference source spectra are used in the calibration process to constrain the frequency-dependent site terms. In the second case, reference events with independent M w estimates are used to constrain the long-period site terms, but for the higher frequencies we impose a Brune (1970) source spectrum with an a priori source scaling, currently set so that the apparent stress increases as ~M o 0.25 .","title":"About CCT"},{"location":"#tutorial-guide-for-new-users","text":"The following is a step-by-step guide for a specific example taken from the San Francisco Bay Area region using broadband waveform data from the UC Berkeley Seismological Laboratory. Note For a new dataset and region, you should expect to run CCT multiple times before settling on a final coda calibration. Initial calibrations invariably will require finding and removing problem events/envelopes/stations that for whatever reason prevent the code from finding the \u2018best\u2019 model parameters. Overwriting the Envelope directory during the initial QA of the data is common. The data set from the SF Bay area was reviewed several times and the resulting calibration is very stable, but this serves as a good example of how you might calibrate your own dataset.","title":"Tutorial Guide for New Users"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#downloading-cct","text":"The latest version of the Coda Calibration Tool (CCT) can be found on the release page The standalone CCT jar file is calibration-standalone-1.0.20-runnable.jar while the REST services only are available in calibration-application-1.0.20-runnable.jar.","title":"Downloading CCT"},{"location":"#downloading-sf-bay-area-example-tarfile","text":"The complete SF Bay Area calibration which includes SAC waveforms, stacked envelopes and JavaScript Object Notation (JSON) parameter files can be downloaded here","title":"Downloading SF Bay Area example tarfile"},{"location":"#running-cct","text":"You can launch CCT by executing Java from the command line as: java -Xmx12g -jar calibration-standalone-1.0.20-runnable.jar Or, if you have Java 11+ as: java -XX:MaxRAMPercentage=70.0 -jar calibration-standalone-1.0.20-runnable.jar Generally your -Xmx flag should be set to, at most, ~70% of the physical RAM available on the machine. You can add the --spring.profiles.active=file flag to the Java call if your dataset is larger than the physical RAM on your machine. This will output a large database file that is also useful if you want to save the entire database or connect to it with an external database browser tool. The tradeoff is that you have to wait for the read/write times of the hard drive so this mode can be slower than the default RAM-only mode.","title":"Running CCT"},{"location":"#recommendations-for-selecting-calibration-data","text":"For a stable and robust calibration, it is best to choose larger events with good SNR that are distributed geographically in the region of interest and recorded by a large number of stations. In addition to broad event distribution, the stations should also be well distributed, otherwise it is difficult to constrain the path terms. Furthermore, it is best to choose clean records that have little if any aftershocks that might contaminate the coda. Including lots of questionable events can ruin the calibration so it is far better to be selective in the choice of events\u2026, more events is not necessarily better! For the SF Bay Area example dataset, there is an abundance of seismicity and many broadband stations to choose from. In this case we have 10 broadband stations and 40 events which is more than sufficient for constraining the calibration parameters (e.g ., we could have used 75% less events and stations and would have obtained nearly the same calibration). We could likely have comparable results with far less events and stations. For example, in the coda calibration in Israel outlined in Mayeda et al. (2003) we used only two stations on opposite ends of the country and a smattering of events throughout the country. With regard to the length of SAC waveform segments, for regional events ranging between ~3.5< M w <6, it is recommended to choose window lengths of ~-300 sec to ~2000 sec relative to the origin time. These longer records are necessary for the long-period surface wave codas (0.02< f <0.3-Hz) for the larger events, but depending on the seismicity level, you can modify the window lengths. For a very local calibration (~<100 km), with only small magnitude events ( M w < ~4.0), window lengths of -50 to 400 seconds relative to the origin time might suffice. Once the envelopes are formed, they are decimated so they will not take up as much space.","title":"Recommendations For Selecting Calibration Data"},{"location":"#creating-envelopes-with-sac-waveform-data","text":"","title":"Creating Envelopes with SAC Waveform Data"},{"location":"#initial-waveform-data","text":"CCT requires SAC files. Horizontal components are preferred, but you can use verticals, just don\u2019t mix them and keep in separate folders. Envelope tool will stack all components for an event recorded at station X. The tool will use the SAC header variables for the event name ( KEVNM ) and station name ( KSTNM ) in the SAC header to create the names for the envelope files. Note The Envelope tool only cares about event time and network/station/channel name. Everything else is optional, though we recommend loading the SAC headers completely. Deconvolve instrument response to velocity in nm/sec. Check that the IDEP parameter in the SAC headers is \u2018 VELOCITY (NM/SEC) \u2019. Set both station and event location headers (i.e., STLA , STLO , EVLA , EVLO ) Set origin time to 0 seconds. Below is an example header of one of the horizontal components. Event origin time must be 0 in the \u2018 OMARKER \u2019 header. This can be done using the \"ch\" command in SAC as follows for the example waveform from Tajikistan (TJ.CHGR): sac> ch o gmt 2010 342 08 21 34 560 (to introduce the event origin time) sac> ch allt ( -1 * &1,o ) (all times are shifted.., begin (B), end (E) to match the \u2018 OMARKER \u2019) Warning If \u2018 OMARKER \u2019 and event locations are not set in the SAC header CCT will not work. Figure. 1, A raw input waveform Figure. 2, The related SAC headers","title":"Initial Waveform Data"},{"location":"#envelope-formation","text":"Start the envelope tool from the main CCT menu Tools > Create Envelopes Load a parameter file: File > Import Job Config... (Choose the JSON file that defines the frequency bands you are interested in such as envelope-bands.json) Figure. 3, Importing an envelop job configuration file. The envelope tool is flexible, allowing you to create other frequency bands or different bandwidths if needed. This can be done by selecting \"Band Generation Settings\" with overlap and log 10 (or linear) spacing. More overlap will result in smoother spectra. Figure. 4, Generating bands from a specification instead. Load SAC waveform files: File > Envelopes from Directory... or File > Envelopes from Files\u2026 Choose your processed SAC files. Warning! If you choose \"Envelopes from Directory\", the tool will attempt to process all files in the directory as well as in all subdirectories. Therefore, it is recommended to store your processed SAC waveforms in their own directory (without any extraneous files or subdirectories). Immediately you will be prompted to choose a location for your output envelopes. We recommend a subdirectory called \"Envelopes\" in the working data directory (i.e. , Data_new/Envelopes). Close the Envelope Tool when the progress bar completes. The envelopes will be created in the following directory structure: ...Data_new/Envelopes/YEAR/MONTH/EVID/STATION/STA_COMP_EVID_FREQ1_FREQ2_VEL_.ENV In subsequent steps, you can import all stack envelopes created in this envelope tool with \"File > Import stack directory\u2026\" and choose the \"Envelopes\" directory.","title":"Envelope Formation"},{"location":"#san-francisco-bay-example-dataset","text":"","title":"San Francisco Bay Example Dataset"},{"location":"#untar-example-file-and-description","text":"In a terminal window copy and untar the Bay_Area_CCT_Example.tar to your directory of choice. This should be the working directory from which you run CCT. You should see the following files and directories: Figure. 5, Example data set list. Calibration_Data directory Upon completion of calibration, you can export this directory which includes the most current JSON calibration parameter file that includes frequency-dependent parameters for site-correction, envelope shape, velocity, path-correction, minimum and maximum coda window length, GT reference events with apparent stress, and reference M w \u2019s. Additionally there are separate site correction files for each station that was calibrated. All files in this example are in ASCII format. Calibration_Parameters_Kevin.json file Parameter file that represents the \u2018final\u2019 JSON file for the Bay Area coda calibration (taken from the Calibration_Data directory and renamed). This could be used for automated processing of future events, or as a starting point in any future updated calibration if new events or stations were acquired. Data_new directory Directory of deconvolved broadband horizontal component velocity SAC waveforms for each event and station. The envelope tool was used to form these envelopes (already applied in this example) and were copied to the Envelope_stack_Kevin_picks directory. Warning If other components exist in the Data_new directory, such as the vertical component or other sampling rate channels, then they will all be added to the final stacked envelope. Only include in this directory the components for which you intend on using in the calibration! Also, it will search sub-directories so be aware! Envelope_stack_Kevin_picks directory Directory of stacked, log 10 averaged horizontal envelopes for pre-determined narrow frequency bands that have been manually QA\u2019d and measurement end times were picked ( f-markers ). Mw_CMT_BSL.dat file ASCII file of independent moment magnitudes determined from full waveform inversion courtesy of Doug Dreger at the Berkeley Seismological Laboratory (BSL). These SF Bay area events can be used for calibration and/or validation. Some of these events were added to the end of the Calibration_Parameters_Kevin.json file. application.properties file Optional configuration override file for CCT. This example shows how to use other independent map layers from a WMS 1.3 server (e.g., NASA WorldWind) to be included in the CCT maps. Note : This file must reside in the directory where CCT is initiated. Envelope-bands.json file JSON file that controls the frequency bands for creating new envelopes using the envelope tool. There are options for smoothing and interpolation if you choose to change the preset values.","title":"Untar Example File and Description"},{"location":"#step-by-step-bay-area-cct-example","text":"","title":"Step-by-Step Bay Area CCT Example"},{"location":"#read-in-necesssary-data","text":"Read in stacked envelopes using the pulldown tab: File>Import Stack Directory\u2026 Figure. 6, Importing stacked envelopes in a directory. Select the Envelopes_stack_Kevin_picks directory You will see the following Task-Progress pop-up window as the envelopes are being read in (roughly 7 seconds on my machine). Upon completion you\u2019ll see this: Figure. 7, Dialog showing amount of envelopes imported, errors (if any), and if the process has completed. Next, read in the Coda Parameter file: File>Import Coda Param... Select the Calibration_Parameters_Kevin.json file (This reads instantly) To view the data in map form, click the Map button in the upper right. In the upper right map pop-up, select the tile pull-down in the upper right. Be sure the application.properties file is in the working directory if you want to use custom layers. You can click on a station or event to see the corresponding name and view envelopes. Figure. 8, The CCT map showing a custom WMS layer featuring the USGS topographic map. Note If you want to take a high resolution image, you can click the camera icon in the lower left corner.","title":"Read in necesssary data"},{"location":"#run-the-calibration","text":"Figure. 9, Beginning a calibration in CCT. At this point you have two choices. If this were a brand new calibration, then none of the envelopes have been picked with measure end times ( f-markers ) so you can choose Run Calibration (Auto Pick) which uses a simple STA/LTA kind of approach to find the \u2018best\u2019 end time measurement. This provides a good initial estimate but you will find that many need to be refined manually to change the auto-picked f-markers , then re-run the calibration again. Auto-picked envelopes will always have an \u2018 ap \u2019 designation on each envelope at the peak S -wave arrival but if you manually change the f-marker and export the envelopes, the \u2018 ap \u2019 will disappear the next time the data is read into CCT. For this example however, use the other pull-down option which is Run Calibration. This will use the existing f-marker picks in the SAC headers (manual and auto-picked) and begin fitting the envelopes to obtain the envelope shape parameters (e.g., \ud835\udf38 and b ), peak S-velocity as a function of distance (e.g., V(r|f) ), perform path correction inversion (e.g., P(r|f) ), and finally site correction determination using predetermined ground-truth (GT) source spectra (e.g., [S(f)\u00b7T(f)] ). This takes less than 2 minutes on my machine and you can close the Progress pop-up screen if you want without affecting the calibration progress.","title":"Run the calibration"},{"location":"#qa-results-vertical-tabs","text":"","title":"QA Results (vertical tabs)"},{"location":"#data-tab","text":"This is the single most important QA feature of the tool because it allows you to manually re-pick envelopes or eliminate bad traces, then you will have to re-run CCT to get a more refined calibration. Calibrations are only as good as the input data so it\u2019s important to eliminate bad envelopes or make time pick adjustments, then repeat the calibration. Through an iterative process the calibration parameters will be better constrained and robust. Adjusted picks can either be written out to a new folder or to the existing folder (see below for more details).","title":"Data tab"},{"location":"#sorting-re-picking-events","text":"In the data table, under the frequency column heading, you can click on the low heading tab and this will sort the bands from lowest to highest frequency based on the low end of the frequency band. Similarly, by clicking on the station column heading you can sort by station in alphabetical order or the event column heading and it will sort by event ID. Figure. 10, Selecting a row to view the associated waveform record. By clicking on any event row (above figure) a pop-up window of the observed envelope (blue), best fit synthetic (green), and model (gray) will appear (see below figure). Figure. 11, Waveform record plot with associated metadata. The f-marker (red vertical line) can be adjusted by clicking, then dragging the f-marker with the mouse. Place the f-marker before the envelope returns to the pre-event noise level and also before any visible aftershocks in the coda. Results will be most accurate when the synthetic envelope and model envelope (green and gray lines, respectively) match. For example, sometimes the fit and model envelopes will diverge towards the end of the envelope, and it is best to place the f-marker before they diverge, if possible. Group velocity markers can be toggle on with the \"GV\" button. This shows the expected phase onset time given the event origin time and distance based on the start and stop velocity settings in the parameter tab. The minimum and maximum window time restrictions for the length of the coda window can be visualized by toggling the \"Window\" button. The window restrictions are also defined in the parameters tab. The minimum window length is a hard restriction that will eliminate coda windows that do not have a sufficient data. The maximum window length is a soft restriction that will truncate longer coda windows to the maximum. The waveform with a red F-pick icon button toggles 'click-to-pick' mode. While in this mode clicking anywhere in the plot will automatically move the f-marker without needing to click and drag. This mode is most useful when you are planning to pick or re-pick potentially many waveforms in a session. The 'move start' ( MS ) button toggles the display of the coda-start ( CS ) marker. This marker tells the amplitude measurement code where to cut the coda window before performing the L1 fit and making the amplitude measurement. This is useful when an area as very high variability early in the coda for potentially reducing variance in the amplitude measurements. You can add an offset for an entire frequency band in the parameters tab using the 'coda-start' column. You can also change the start for an individual offset of a specific waveform by clicking and dragging the \"CS\" pick. When you release the mouse you will see the \"CS\" pick change to a 'user coda start' ( UCS ) pick instead. A \"UCS\" pick works the same as a \"CS\" pick but the code will not move a \"UCS\" pick when parameters change and a \"UCS\" is always given priority over a \"CS\" pick. The solid horizontal black line is the sum of the averaged SNR and pre-set tolerance in the calibration JSON file (which you can change if you want). The dashed horizontal line is a quasi average noise level amplitude. To eliminate a trace move the f-marker before the start of the S-wave arrival. If you do not want to use an envelope or an entire event, you can uncheck the box in the \"Used\" column and it will not be exported in the next step. You can zoom into the envelope figure by dragging a box around the area you want to zoom into on the waveform plot. Double-click anywhere on the screen to revert back to the original scale or hit the home icon in the top right icon tray to reset the axes. To select a large number of envelopes (see next figure) you can click the upper bound and then while depressing the \u2018shift\u2019 button use your mouse to select then \u2018single click\u2019 the lower bound that you desire (see highlighted blue area). This allows reviewing lots of data to look for trends (e.g., aftershocks, noise bursts) across stations, bands or events. I select a single band and methodically review all events and stations. Figure. 12, Viewing multiple waveforms at once in a paginated display. This display also supports synchronized zooming of all waveforms by toggling into the 'Sync Zoom (SZ)' mode. CCT will display five envelopes at a time, and you can use left and right arrow keys or the associated buttons (top left) to page through all the envelopes in your selection. Once you\u2019re done, export the waveforms; otherwise all your manual picking will be lost! Also, in the Data pull down tab, you can choose \u2018Make Picks Reviewed\u2019 which will change all auto-picked f-markers reviewed, if for example you\u2019ve visually checked all the f-markers and would like them to be changed to \u2018reviewed\u2019. If you export the envelopes then all \u2018 ap \u2019 marks will disappear. Important To save all the new picks in the current session, under File choose Export Waveforms and you can choose the same Envelope directory, in this case Envelope_stack_Kevin_picks, or create a new directory. The next time you run the calibration, the tool will use the new f-marker picks.","title":"Sorting &amp; Re-Picking Events"},{"location":"#parameters-tab","text":"Allows users to view the calibration parameters during the current calibration and make adjustments, specifically the window length limits ( Min and Max ) as well as SNR levels (in log 10). These changes will ONLY be kept if you export the calibration (File->Export Calibration). You will then have to use the newly created Calibration_Parameters.json file for the subsequent calibration refinement. Figure. 13, The parameters table that defines the core of a calibraition.","title":"Parameters tab"},{"location":"#shape-tab","text":"Allows users to view empirical envelope shape parameters and velocity fits to the observed data as a function of distance (see Mayeda et al. 2003 for more details). Note You must first hit the Refresh button in the upper right corner. Then in the Frequency Band pull-down tab, you can select the frequency band you would like to view. If you keep the mouse on the Frequency Band tab, you can use the up or down arrows to cycle through the various bands. In the example below I have selected an outlier in peak Velocity in the 1.5-2.0-Hz band which is now highlighted with a blue circle, as well as in the subsequent shape parameter plots, \ud835\udf38 and b . The event envelope is shown to the left and the event and station is shown on the map in white. The envelope shape parameter \ud835\udf38 (Gamma), which controls the shape of the early coda, and b , which controls the later coda (exponential term), all look to have reasonable fits as a function of distance using a simple equation of a hyperbola (blue dashed lines). Figure. 14, Plots showing the results of calibrating the three 1D shape models.","title":"Shape tab"},{"location":"#path-tab","text":"Allows users to view interstation amplitude before and after path correction. Note You must first hit the Refresh button in the upper right corner. Reviewing the path corrections for all the frequency bands is important for identifying outliers in the data due to incorrect instrument correction or degenerative issues with a particular waveform (aftershocks can often be the culprit). It also allows you to ascertain if the path corrections are reasonable and whether the distribution of calibration data and stations is sufficient. The example below on the far right shows interstation amplitude scatter between stations BKS and SAO at 1.0-1.5-Hz before (red triangles) and after path correction (blue triangles). For this example, the interstation scatter for the path-corrected data is 0.13 and the stations are ~142 km apart. The middle panel is a summary of all possible interstation combinations for this band where we have plotted data standard deviation as a function of station separation in km with a minimum number of common events of 4 (see \u2018Station Count Filter\u2019). If there were outliers, this feature helps to identify the offending envelope or event so that it can be either re-picked or removed. We see that the path corrections are working well because data standard deviation for path-corrected coda (blue circles) remains at ~0.1. As expected, the uncorrected coda amplitude\u2019s standard deviation increases with increasing station separation (red squares). Figure. 15, Plots showing the the path correction results by frequency band for the whole dataset (left) and two specific stations compared to each other (right).","title":"Path tab"},{"location":"#site-tab","text":"Allows users to view source spectra in units of N-m after site/transfer function correction determinations (e.g., [S(f)\u00b7T(f)] ) have been made using selected GT reference events. Note You must first hit the Refresh button in the upper right corner. Under the Source Spectra tab, selecting the Event drop-down menu allows you to cycle through the various events. The example below shows the case for one of the reference events for which we had previously determined an apparent stress (\u03c4 a = \u03bcEs/Mo) of 0.15 MPa using coda spectral ratios (see Mayeda et al., 2007 ). Using several GT reference events, CCT determines the best average, station-specific site/transfer terms per band to be applied to all events. This obviates the need to assume any apparent stress scaling for the region. If only independent M w \u2019s are available, then CCT defaults to an assumed scaling of F c ~ M o 0.25 following Mayeda and Walter (1996) . On the right of the spectra are the stations used for this event. Black dashed line is the reference Brune (1970) spectral shape that was determined beforehand. Red dashed line is the best-fitting Brune spectral model to the observed data. Black solid lines connect the averaged spectral value in each band. Vertical line and F c on the spectra denote the corner frequency from the best-fit source spectra. On the left hand side of the moment-rate source spectra are associated metadata and final measurement values. Observed Total Energy Integrated observed energy (from velocity-squared spectra) Observed Apparent Stress Apparent stress derived only from observed measurements Model Fit M w M w derived from omega-square fitting to observed data Model Fit Apparent Stress Apparent stress derived from theoretical best-fit omega square model Model Fit Energy Integrated energy from 0 to infinity Reference M w Independent M w derived a priori , preferably from waveform modeling. Figure. 16, Site correction and final results plots showing the end spectra for each event after all corrections have been made. As with other data panels, you can click on any amplitude spectral value and a pop-up window showing the envelope fit will appear which can be adjusted if necessary. Remember to export envelopes to save any changes made to f-markers ! You can also zoom in on any part of the spectra to QC the data points by clicking and dragging. https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServerSource Results tab allows you to review the quality of the calibration (see figure below). The top left figure shows M w for validation events (black squares) compared to the measured M w coda from spectral fitting (x-axis) as shown in the Source Spectra tab. M w for GT reference events (red circles) also are shown. Figure. 17, The site results overview displaying the raw data table and summary plots for the entire calibration data set. The upper middle figure shows that the reference events\u2019 apparent stress are faithfully returned after calibration. Upper right figure shows variation in site correction. The bottom left figure shows seismic moment vs total energy. Lower middle figure shows moment vs apparent stress and the figure on lower right shows the associated moment vs corner frequency. Finally, the table on the bottom shows all the measured source parameters along with other diagnostic information such as misfit, error, iteration count, station count, etc. The Site->Site Terms tab shows two figures. The bottom figure in the screenshot below shows averaged station-specific site and S-to-coda transfer terms that are used to transform the distance-corrected coda amplitudes (in dimensionless units) to an absolute value in N-m. To isolate only the weak motion S-coda site term (from the common S-to-coda transfer function term), a ratio (subtraction since values are in log 10) can be made relative to the average across the network, or relative to a particular site, such as a \u2018rock\u2019 site. This option is shown in the top figure taken from Ridgecrest, CA CCT calibration where we have chosen a hard rock site POR as the reference in this example. Notice we observe pronounced relative amplification in the ~0.2 to 3.0-Hz range for softer soil sites, whereas above this range we see that absorption (low surface Q) dominates those same sites. Figure. 17, Plots showing the relative site correction terms for each station, a network average, and a plot relative to any individual station in the correction set.","title":"Site tab"},{"location":"#measured-mws-tab","text":"This feature allows you to measure M w s using an existing calibration for new events in a region. This feature also enables automated processing of new events as they are formed provided the event is located in the calibrated area and a calibrated station recorded the event by using the REST services CCT provides. Oftentimes we impose a more strict set of guidelines for calibration, whereas for routine event processing we might relax the minimum window length or change the SNR levels. Save your M w s with File -> Export Measured Mws\u2026","title":"Measured Mws tab"},{"location":"#glossary-of-terms","text":"Auto-Pick (ap) Designation to show that the f-marker (envelope measurement stopping point) was chosen automatically by CCT using a modified STA/LTA between the observed and synthetic coda envelopes. b(r|f) 'beta' (parameter) Exponential decay parameter that controls the envelope shape as a function of distance, r, for each frequency band, f. (e.g., see Equation 1 below) Calibration Events Good quality events used to determine envelope shape, velocity and path terms. Best to choose events with good spatial distribution across the network of stations and ample signal length, preferably free of aftershocks and data spikes. \ud835\udf38(r|f): 'gamma' (parameter) Envelope decay parameter that controls the early part of the coda shape immediately after the direct wave arrival as a function of distance, r, for each frequency band, f. (e.g ., see Equation 1 below) Ground-Truth (GT) Reference Events Theoretical Brune source spectra defined by an independent moment magnitude ( M w ) and an apparent stress estimate (in MPa). These are used for determining frequency dependent site terms for each station for all frequency bands. Can be used in conjunction with Reference M w Events. These can be appended to the calibration JSON file (see Calibration_Parameters_Kevin.json). Use of GT events precludes assuming any stress drop scaling for the region. f-marker Envelope measurement stopping time stored in the observed envelope header that can be picked automatically or manually. If an ap pick is visible at the direct arrival, the f-marker was obtained through autopicking. Once the f-marker is manually moved and the envelope is saved, the ap pick disappears the next time it is read in. Reference M w Events Independent moment magnitudes determined by waveform modeling that are used to constrain only the long period site terms. Can be used in conjunction with GT reference events. These can be appended to the calibration JSON file (see Calibration_Parameters_Kevin.json). Validation Events Independent moment magnitudes used to validate the calibration. These events were not used for site correction determination, but could be used for envelope shape, velocity and path determination. These can be placed in the calibration JSON file (see Calibration_Parameters_Kevin.json). V(r|f) velocity (parameter) Peak velocity of the S-wave or surface wave envelope as a function of distance. This gives us a starting time ts = r/V(r|f) to begin the synthetic envelopes which will be used to measure the observed envelopes. (e.g., see Equation 1 below) Equation 1 Coda amplitude A c is a function of distance ( r ) and time ( t ) relative to the origin time for each narrow frequency band, f . W0 is the source term, S is the site term, T is the S-to-coda transfer function, P is the empirical path correction term, H is the Heaviside step function, \ud835\udf38 and b control the coda envelope shape as a function of distance, r (km). t s is the direct wave arrival time, t s = r/V(r|f) and V(r|f) is the velocity at distance r of the peak arrival that is empirically determined by CCT. See Mayeda et al., (2003) for a more detailed explanation of the method and parameterization. Note The site ( S ) and transfer function ( T ) terms are combined in the tool, as both are distance independent and cannot be separated. It is assumed that the S-to-coda transfer function is common for all events in a region, except in extreme cases of very shallow or deep crustal events. We often refer to the \u2018site term\u2019 but it actually includes both effects.","title":"Glossary of terms"},{"location":"#building-cct-from-the-java-source-code","text":"Building CCT from source code will require Apache Maven version 3.8.x or later. If the version of Maven in your system is older that the required version, you will need to download a recent release from https://downloads.apache.org/maven/maven-3 We recommend that users download the pre-compiled versions of Apache Maven (see files under the binaries/ folder). In the case that the user will need to build Apache Maven 3.8.x from source, this will require the Java JDK version 1.11.x or later. Once you have the JDK and Maven binaries you can build CCT by opening the top level 'coda-calibration' directory and running in a terminal: $>mvn clean install Which will download all the dependencies, compile all the code, and then produce built artifacts. You should see a build report upon completion in the terminal (see below): Figure. 18, Build success report for CCT and sub-modules. Artifacts are available for the overall project along with all sub-modules in the relevant target/ folders in each project and sub-project. Of most interest to end users is the standalone desktop application jar that can be found at 'coda-calibration/calibration-standalone/target/calibration-standalone-[VERSION]-runnable.jar'.","title":"Building CCT from the Java Source Code"},{"location":"#accessing-the-internal-database","text":"CCT uses an H2 database for storing all data and derived measurements internally during processing. The tool additionally supports an 'external file' mode that allows for external tools to access this database. This capability allows for querying, joing, aggregating, and exporting any data produced by the tool. CCT additionally includes the H2 web-based SQL client as a built in option if no other JDBC tools are available. Launch the tool in file-based database mode: java -jar calibration-standalone-*-runnable.jar --spring.profiles.active=file This will create a codaH2.*.db set of files in the current directory Launch the embedded database browser (or any H2/JDBC compatible reader like DBeaver ) java -cp calibration-standalone-*-runnable.jar -Dh2.bindAddress=127.0.0.1 -Dloader.main=org.h2.tools.Console org.springframework.boot.loader.PropertiesLauncher Now you can connect to the *.db file as a database using this connection string (update folder path to match yours) jdbc:h2:/path/to/codaH2.db;DB_CLOSE_DELAY=-1;COMPRESS=TRUE;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9999 Figure. 19, Login screen for connecting to the database as the default 'sa' user. Now you can start writing queries using any built-in SQL functions and export your results to CSV using the \u2018CSVWRITE\u2019 function Figure. 20, Example of using the built in H2 functions to export a SQL query directly as a CSV file.","title":"Accessing the internal database"},{"location":"#using-rest-endpoints-to-get-mws","text":"The internal APIs are expecting internal JSON formats. CCT makes a distinction between the front-end import/export JSON and the backend transport JSON for a couple of reasons, mostly support for changing them independently and because we consolidate a lot of logic into the human facing \"summary\" JSON. As a result, you need to translate the exported calibration JSON to the internal format. The easiest way to do that is to load up the tool and import your calibration, then do a GET on the relevant endpoints to get the internal representation. Ideally before the end of the summer I should put together docs on this and maybe add a special endpoint just to do an import of existing user JSON as a one shot. So the shared frequency band parameters is a GET request to the https://127.0.0.1:53921/api/v1/params/shared-fb-parameters REST endpoint and the site specific parameters is a GET to https://127.0.0.1:53921/api/v1/params/site-fb-parameters . See the API Documentation for additional information about the JSON schema and endpoints. See the Example Jupyter Notebook for a working example of using these two JSON files for a calibrated region using FDSN webservices to fetch event information and waveforms, then feeding that information to CCT to measure M w s.","title":"Using REST endpoints to get Mws"},{"location":"#logging-settings-at-runtime","text":"CCT pins the logging level to INFO in the default config. The runtime flag you need must be more specific to override this setting. Warning Rather than being able to set -Dlogging.level.gov.llnl=[LEVEL] you must go down to -Dlogging.level.gov.llnl.gnem.apps.coda=[LEVEL] or more spefific to override the logging level.","title":"Logging settings at runtime"},{"location":"#overriding-envelope-creation-bands-when-using-rest-services","text":"You will need to change the example notebook POST command to the envelope service endpoints if you want to customize the bands generated. Alter the request (Python example below) to add a custom envelope job configuration JSON to the job request. This will cause the envelope service to use these bands instead of the default configuration. This also allows changing smoothing and bandwidth settings for bands. with open(\"envelope_job_config.json\") as env_bands: envelope_bands = json.load(env_bands) waveData[\"jobConfig\"] = envelope_bands r = requests.post('https://127.0.0.1:53921/api/v1/envelopes/create/batch-stacks-only/10000', json=waveData, verify=False) print(r.status_code) See the Example Jupyter Notebooks for usage examples.","title":"Overriding envelope creation bands when using REST services"},{"location":"#references","text":"Barno, J. (2017). LLNL/coda-calibration-tool, doi: 10.11578/dc.20180306.1 . Brune, J. N., Tectonic stress and spectra of seismic shear waves from earthquakes, J. Geophys. Res. 75, 4997-5009, 1970. Mayeda, K. and W.R. Walter, Moment, energy, stress drop, and source spectra of western U.S. earthquakes, 11195-11208, 101, J. Geophys. Res. , 1996. Mayeda, K., Hofstetter A., O'Boyle J. L., Walter, W. R, Stable and transportable regional magnitudes based on coda-derived moment-rate spectra. Bull. Seismol. Soc. Am., 93, 224-239, 2003. Mayeda, K., L. Malagnini, W.R. Walter, A new spectral ratio method using narrow band coda envelopes: Evidence for non-self-similarity in the Hector Mine sequence, Geophys. Res. Lett., doi:10.1029/2007GL030041 , 2007.","title":"References"},{"location":"#configuration-variables","text":"Variable Default value Notes app.height 800 Default height in pixels of the CCT window app.width 600 Default width in pixels of the CCT window distance-threshold-km 300.0 Distance threshold for the critical distance to be used for determining which set of the group velocity values to use while building the path model envelope-app.max-batching 50 Maximum number of waveforms to process per batch while generating waveforms. Larger values take more memory but may speed up the process if you are generating large numbers. group-velocity1-gt-distance 4.7 Maximum onset group velocity (km/s) if beyond the critical distance group-velocity2-gt-distance 2.3 Minimum onset group velocity (km/s) if beyond the critical distance group-velocity1-lt-distance 3.9 Maximum onset group velocity (km/s) if before the critical distance group-velocity2-lt-distance 1.9 Minimum onset group velocity (km/s) if before the critical distance measurementPoolSize 10 Number of threads to allocate to the measurement pool, larger values may increase throughput on machines with high CPU core numbers path.phase-velocity-kms 3.5 Expected phase velocity to use during path correction path.use-aggressive-opt true Run additional optimization chains to increase stability, can be set to false for faster runs in most cases when there is sufficient data. phase-velocity-kms 3.5 Expected phase velocity to use phase.phase-velocity-kms 3.5 Expected phase velocity to use shape-constraints.b0reg 10000 shape-constraints.bDistMax 1550 shape-constraints.bDistMin 0 shape-constraints.fittingPointCount 10000 shape-constraints.g0reg 100 shape-constraints.g1reg -1 shape-constraints.gDistMax 0 shape-constraints.gDistMin 600 shape-constraints.iterations 10 shape-constraints.lengthWeight 0.5 Weighting given to how long the coda window is when fitting the gray shapelines [0.0, 1.0]. shape-constraints.maxBeta -0.0001 shape-constraints.maxBP1 1000 shape-constraints.maxBP2 20 shape-constraints.maxBP3 1500 shape-constraints.maxGamma 4.0 shape-constraints.maxGP1 100 shape-constraints.maxGP2 101 shape-constraints.maxGP3 101 shape-constraints.maxIntercept 20.0 shape-constraints.maxVP1 600 shape-constraints.maxVP2 5000 shape-constraints.maxVP3 5000 shape-constraints.minBeta -4.0 shape-constraints.minBP1 -500 shape-constraints.minBP2 0.1 shape-constraints.minBP3 0.0001 shape-constraints.minGamma 0.001 shape-constraints.minGP1 0 shape-constraints.minGP2 0 shape-constraints.minGP3 1 shape-constraints.minIntercept 0.001 shape-constraints.minVP1 50 shape-constraints.minVP2 1 shape-constraints.minVP3 1 shape-constraints.v0reg 100 shape-constraints.vDistMax 1600 shape-constraints.vDistMin 0 shape-constraints.ybbMax 0.0005 shape-constraints.ybbMin -12.0E-2 shape-constraints.yggMax 100 shape-constraints.yggMin 0.01 shape-constraints.yvvMax 6.01 shape-constraints.yvvMin 0.5 show-energy-uq-summary false Show additional UQ min/max values for energy measurements in the summary table in Site/Measurement. show-stress-bounds-in-uq-spectra true Show the stress values in addition to the Mw values when plotting the UQ spectra in Site/Measurement. spectra-calc.iteration-cutoff 50 spectra-calc.max-apparent-stress-mpa 1000.00 spectra-calc.max-mw 10.0 spectra-calc.min-apparent-stress-mpa 0.0001 spectra-calc.min-mw 0.01 spectra-calc.suspect-energy-ratio 0.25 spectra-calc.suspect-iterations 50 spectra-calc.suspect-mw-range 1.5 spectraTruncationEnabled true Allows spectra to be truncated when mixing GT spectra reference events with Mw only references. velocity.calc.distance-threshold-km 300.0 velocity.calc.group-velocity1-gt-distance 4.7 velocity.calc.group-velocity1-lt-distance 3.9 velocity.calc.group-velocity2-gt-distance 2.3 velocity.calc.group-velocity2-lt-distance 1.9 webclient.basePath localhost:53921","title":"Configuration variables"},{"location":"javadoc/legal/jquery/","text":"jQuery v3.6.1 jQuery License jQuery v 3.6.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ****************************************** The jQuery JavaScript Library v3.6.1 also includes Sizzle.js Sizzle.js includes the following license: Copyright JS Foundation and other contributors, https://js.foundation/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/sizzle The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. *********************","title":"Jquery"},{"location":"javadoc/legal/jquery/#jquery-v361","text":"","title":"jQuery v3.6.1"},{"location":"javadoc/legal/jquery/#jquery-license","text":"jQuery v 3.6.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ****************************************** The jQuery JavaScript Library v3.6.1 also includes Sizzle.js Sizzle.js includes the following license: Copyright JS Foundation and other contributors, https://js.foundation/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/sizzle The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. *********************","title":"jQuery License"},{"location":"javadoc/legal/jqueryUI/","text":"jQuery UI v1.12.1 jQuery UI License Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jqueryUI"},{"location":"javadoc/legal/jqueryUI/#jquery-ui-v1121","text":"","title":"jQuery UI v1.12.1"},{"location":"javadoc/legal/jqueryUI/#jquery-ui-license","text":"Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jQuery UI License"},{"location":"javadoc/legal/jszip/","text":"JSZip v3.7.1 JSZip is dual licensed. You may use it under the MIT license or the GPLv3 license. The MIT License Copyright (c) 2009-2016 Stuart Knightley, David Duponchel, Franz Buchinger, Ant\u00f3nio Afonso Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. GPL version 3 GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"Jszip"},{"location":"javadoc/legal/jszip/#jszip-v371","text":"JSZip is dual licensed. You may use it under the MIT license or the GPLv3 license.","title":"JSZip v3.7.1"},{"location":"javadoc/legal/jszip/#the-mit-license","text":"Copyright (c) 2009-2016 Stuart Knightley, David Duponchel, Franz Buchinger, Ant\u00f3nio Afonso Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License"},{"location":"javadoc/legal/jszip/#gpl-version-3","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"GPL version 3"},{"location":"javadoc/legal/pako/","text":"Pako v1.0 Pako License Copyright (C) 2014-2017 by Vitaly Puzrin and Andrei Tuputcyn Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. (C) 1995-2013 Jean-loup Gailly and Mark Adler (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution.","title":"Pako"},{"location":"javadoc/legal/pako/#pako-v10","text":"","title":"Pako v1.0"},{"location":"javadoc/legal/pako/#pako-license","text":"Copyright (C) 2014-2017 by Vitaly Puzrin and Andrei Tuputcyn Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. (C) 1995-2013 Jean-loup Gailly and Mark Adler (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution.","title":"Pako License"}]}